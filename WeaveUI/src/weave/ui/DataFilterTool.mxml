<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<DraggablePanel xmlns="weave.ui.*" 
				layout="vertical" verticalAlign="middle"
				xmlns:mx="http://www.adobe.com/2006/mxml" 
				xmlns:ui="weave.ui.*" implements="weave.api.ui.IVisTool_Utility, weave.api.ui.ISelectableAttributes"
				horizontalScrollPolicy="off" verticalScrollPolicy="off"
				>
	<mx:Script>
		<![CDATA[
			import avmplus.getQualifiedClassName;
			
			import flash.desktop.Clipboard;
			import flash.desktop.ClipboardFormats;
			
			import weave.Weave;
			import weave.api.core.ILinkableObject;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IKeyFilter;
			import weave.api.getSessionState;
			import weave.api.registerLinkableChild;
			import weave.api.setSessionState;
			import weave.api.ui.ILinkableObjectEditor;
			import weave.api.ui.IVisTool;
			import weave.compiler.Compiler;
			import weave.compiler.StandardLib;
			import weave.core.CallbackCollection;
			import weave.core.LinkableDynamicObject;
			import weave.core.LinkableFunction;
			import weave.data.KeySets.NumberDataFilter;
			import weave.data.KeySets.StringDataFilter;
			import weave.editors.NumberDataFilterEditor;
			import weave.editors.StringDataFilterEditor;
			import weave.menus.WeaveMenuItem;
			import weave.utils.ColumnUtils;
			
			WeaveAPI.ClassRegistry.registerImplementation(IVisTool, DataFilterTool, "Data Filter");
			
			public const filter:LinkableDynamicObject = registerLinkableChild(this, new LinkableDynamicObject(IKeyFilter), handleFilterWatcher);
			public const editor:LinkableDynamicObject = registerLinkableChild(this, new LinkableDynamicObject(ILinkableObjectEditor), handleEditor, true);
			
			private function getFilter():IKeyFilter
			{
				return filter.target as IKeyFilter;
			}
			private function getEditor():ILinkableObjectEditor
			{
				return editor.target as ILinkableObjectEditor;
			}
			private function handleEditor():void
			{
				var _editor:ILinkableObjectEditor = getEditor();
				if (_editor && !_editor.parent)
					addChild(_editor as DisplayObject);
			}
			
			private function getFilterColumn():IAttributeColumn
			{
				var kf:IKeyFilter = getFilter();
				var ndf:NumberDataFilter = kf as NumberDataFilter;
				var sdf:StringDataFilter = kf as StringDataFilter;
				return ((ndf && ndf.column) || (sdf && sdf.column)) as IAttributeColumn;
			}
			
			override protected function inConstructor():void
			{
				super.inConstructor();
				enableSubMenu.value = true;
			}
			
			override protected function createChildren():void
			{
				if (createdChildren)
					return;
				super.createChildren();
				
				function onClick(item:WeaveMenuItem):void
				{
					var filterType:Class = item.data[0] as Class;
					var layoutMode:String = item.data[1];
					setFilterType(filterType, {layoutMode: layoutMode});
				}
				function isToggled(item:WeaveMenuItem):Boolean
				{
					var filterType:Class = item.data[0] as Class;
					var layoutMode:String = item.data[1];
					if (getFilter() is filterType)
					{
						if (layoutMode)
						{
							var editor:StringDataFilterEditor = getEditor() as StringDataFilterEditor;
							return editor && editor.layoutMode.value == layoutMode;
						}
						return true;
					}
					return false;
				}
				subMenuButton.data = [
					{
						data: [StringDataFilter],
						label: lang("Discrete values"),
						type: WeaveMenuItem.TYPE_RADIO,
						toggled: isToggled,
						children: MenuToolViewStack.LAYOUTS.map(function(layout:String, i:int, a:Array):Object {
							return {
								data: [StringDataFilter, layout],
								label: MenuToolViewStack.layoutLabelFunction(layout),
								click: onClick,
								type: WeaveMenuItem.TYPE_RADIO,
								toggled: isToggled
							};
						})
					},{
						data: [NumberDataFilter],
						label: lang("Continuous range"),
						type: WeaveMenuItem.TYPE_RADIO,
						toggled: isToggled,
						click: onClick,
						children: function():Array {
							var ndfe:NumberDataFilterEditor = editor.target as NumberDataFilterEditor;
							if (!ndfe)
								return null;
							return [
								{
									label: lang('Show selector for minimum value'),
									type: WeaveMenuItem.TYPE_CHECK,
									toggled: ndfe.showMinThumb
								},{
									label: lang('Show selector for maximum value'),
									type: WeaveMenuItem.TYPE_CHECK,
									toggled: ndfe.showMaxThumb
								},{
									label: lang('Force discrete values'),
									type: WeaveMenuItem.TYPE_CHECK,
									toggled: ndfe.forceDiscreteValues
								}
							];
						}
					},
					WeaveMenuItem.TYPE_SEPARATOR,
					{
						label: lang("Show filter toggle CheckBox"),
						type: WeaveMenuItem.TYPE_CHECK,
						toggled: function():Boolean {
							var _editor:ILinkableObjectEditor = getEditor();
							return _editor && getSessionState(_editor)['showToggle'];
						},
						click: function():void {
							var _editor:ILinkableObjectEditor = getEditor();
							if (_editor)
							{
								var shown:Boolean = getSessionState(_editor)['showToggle'];
								setSessionState(_editor, {"showToggle": !shown}, false);
								// when hiding toggle, enable filter
								if (shown)
								{
									var sdf:StringDataFilter = getFilter() as StringDataFilter;
									var ndf:NumberDataFilter = getFilter() as NumberDataFilter;
									if (sdf)
										sdf.enabled.value = true;
									if (ndf)
										ndf.enabled.value = true;
								}
							}
						}
					},{
						label: lang("Show play button"),
						type: WeaveMenuItem.TYPE_CHECK,
						toggled: function():Boolean {
							var _editor:ILinkableObjectEditor = getEditor();
							return _editor && getSessionState(_editor)['showPlayButton'];
						},
						click: function():void {
							var _editor:ILinkableObjectEditor = getEditor();
							if (_editor)
								setSessionState(_editor, {"showPlayButton": !getSessionState(_editor)['showPlayButton']}, false);
						}
					},
					WeaveMenuItem.TYPE_SEPARATOR,
					{
						label: lang("Create and copy macro for tool titles"),
						click: function():void {
							Clipboard.generalClipboard.setData(ClipboardFormats.TEXT_FORMAT, getPanelTitleMacroScript());
						}
					},
					WeaveMenuItem.TYPE_SEPARATOR,
					{
						label: lang("Edit session state"),
						click: toggleControlPanel
					}
				];
				
				callLater(initLater);
			}
				
			public function getPanelTitleMacroScript():String
			{
				var macroName:String = 'getFilterText';
				if (!Weave.properties.macros.getObject(macroName))
				{
					var lf:LinkableFunction = Weave.properties.macros.requestObject(macroName, LinkableFunction, false);
					lf.value = StandardLib.unIndent('\
						function(nameOrPath){\n\
							var path = nameOrPath as Array || ["defaultSubsetKeyFilter", "filters", nameOrPath];\n\
							var filter = WeaveAPI.SessionManager.getObject(WeaveAPI.globalHashMap, path);\n\
							if (filter is StringDataFilter && filter.enabled.value)\n\
							{\n\
								var values = filter.stringValues.getSessionState() || [];\n\
								if (values.length)\n\
									return `({ values.join(", ") })`;\n\
							}\n\
							else if (filter is NumberDataFilter && filter.enabled.value)\n\
							{\n\
								var min = ColumnUtils.deriveStringFromNumber(filter.column, filter.min.value);\n\
								var max = ColumnUtils.deriveStringFromNumber(filter.column, filter.max.value);\n\
								return `[{min}, {max}]`;\n\
							}\n\
							return "";\n\
						}\
					');
				}
				
				var path:Array = filter.targetPath;
				var pathStr:String = Compiler.stringify(path);
				
				var name:String = path[path.length - 1];
				if (StandardLib.compare(path, ['defaultSubsetKeyFilter', 'filters', name]) == 0)
					pathStr = Compiler.stringify(name);
				
				return '{' + macroName + '(' + pathStr + ')}';
			}
			
			private function initLater():void
			{
				if (filter.triggerCounter == CallbackCollection.DEFAULT_TRIGGER_COUNT)
					filter.targetPath = [Weave.DEFAULT_SUBSET_KEYFILTER, 'filters', WeaveAPI.globalHashMap.getName(this)];
				if (!getFilter())
					setFilterType(StringDataFilter, null);
			}
			
			override public function dispose():void
			{
				if (filter.targetPath)
				{
					try
					{
						WeaveAPI.ExternalSessionStateInterface.removeObject(filter.targetPath);
					}
					catch (e:Error)
					{
						trace(e.getStackTrace());
					}
				}
				super.dispose()
			}
			
			private function setFilterType(type:Class, editorDiff:Object):void
			{
				var editorState:Object = editor.target && getSessionState(editor.target);
				var filterState:Object = filter.target && getSessionState(filter.target);
				
				try
				{
					WeaveAPI.ExternalSessionStateInterface.requestObject(filter.targetPath, getQualifiedClassName(type));
				}
				catch (e:Error)
				{
					trace(e.getStackTrace());
				}
				
				if (filter.target && filterState)
					setSessionState(filter.target, filterState);
				if (editor.target && editorState)
				{
					WeaveAPI.SessionManager.combineDiff(editorState, editorDiff);
					setSessionState(editor.target, editorState);
				}
			}
			
			private function handleFilterWatcher():void
			{
				handlePanelTitleChange();
				
				var _filter:ILinkableObject = getFilter();
				var _editor:ILinkableObjectEditor = getEditor();
				if (_filter)
				{
					var editorClass:Class = WeaveAPI.EditorManager.getEditorClass(_filter);
					if (editorClass)
					{
						_editor = editor.requestLocalObject(editorClass, false);
						if (_editor)
							_editor.setTarget(_filter);
						return;
					}
				}
				if (_editor)
					_editor.setTarget(null);
			}
			
			override public function get defaultPanelTitle():String
			{
				if (getFilterColumn())
					return lang('Filter for {0}', ColumnUtils.getTitle(getFilterColumn()));
				
				return lang('Filter');
			}
			
			public function getSelectableAttributeNames():Array
			{
				return getFilterColumn() ? ['Filter'] : [];
			}
			
			public function getSelectableAttributes():Array
			{
				return getFilterColumn() ? [getFilterColumn()] : [];
			}
		]]>
	</mx:Script>
	<!--<editorFactory>
		<mx:Component>
			<ControlPanel>
				<mx:VBox width="100%">
					
				</mx:VBox>
			</ControlPanel>
		</mx:Component>
	</editorFactory>-->
</DraggablePanel>
